use sov_mock_da::MockDaSpec;
use sov_mock_zkvm::MockZkvm;
use sov_modules_api::execution_mode::Native;
use sov_modules_api::macros::config_value;
use sov_modules_api::schemars::schema_for;
use sov_modules_api::sov_universal_wallet::schema::Schema;
use sov_modules_api::transaction::{Transaction, UnsignedTransaction};
use sov_modules_api::Address;
use sov_universal_wallet::schema::ChainData;
use std::fs::File;
use std::io::{self, Write};
use stf_starter::Runtime;
use stf_starter::RuntimeCall;

type S = sov_modules_api::default_spec::DefaultSpec<MockDaSpec, MockZkvm, MockZkvm, Native>;

fn store_schema_as_json(filename: &str) -> io::Result<()> {
    let schema = Schema::of_rollup_types_with_chain_data::<
        Transaction<Runtime<S>, S>,
        UnsignedTransaction<Runtime<S>, S>,
        RuntimeCall<S>,
        Address,
    >(ChainData {
        chain_id: config_value!("CHAIN_ID"),
        chain_name: config_value!("CHAIN_NAME").to_string(),
    })
    .unwrap();

    let schema_json_string = serde_json::to_string_pretty(&schema)?;
    let mut json_file = File::create(filename)?;
    json_file.write_all(schema_json_string.as_bytes())?;
    json_file.write_all(b"\n")?;

    let chain_hash = schema.cached_chain_hash().unwrap();
    let mut generated_file = File::create("../autogenerated.rs")?;
    write!(
        &mut generated_file,
        "pub const CHAIN_HASH: [u8; 32] = {:?};\n\n",
        chain_hash
    )?;
    write!(
        &mut generated_file,
        "#[allow(dead_code)]\npub const SCHEMA_JSON: &str = r#\"{}\"#;\n",
        schema_json_string
    )?;

    Ok(())
}

fn main() -> std::io::Result<()> {
    store_schema_as_json("rollup-schema.json")?;

    // usage with quicktype (after removing invalid empty `NotInstantiable` enum)
    // quicktype -s schema runtime_call.json -o runtime_call.ts
    // Resulting TypeScript file will contain strong types for the runtimes call messages
    let mut runtime_call = File::create("runtime_call.json").unwrap();
    let schema = schema_for!(RuntimeCall<S>);
    let schema_str = serde_json::to_string_pretty(&schema).unwrap();
    runtime_call.write_all(schema_str.as_bytes()).unwrap();
    runtime_call.write_all(b"\n")?;

    Ok(())
}
